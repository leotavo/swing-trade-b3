name: CI

on:
  push:
    branches:
      - main
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: ci (3.11)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_ORGANIZATION: ${{ vars.SONAR_ORGANIZATION }}
      SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.4
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Cache Poetry and pip
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: poetry-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Ruff (lint)
        run: poetry run ruff check .

      - name: Black (format check)
        run: poetry run black --check .

      - name: Mypy (type check)
        run: poetry run mypy .
        if: always()

      - name: Pytest (with coverage, 100% required)
        if: always()
        run: poetry run pytest -q

      - name: Upload coverage.xml
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-xml
          path: coverage.xml
          if-no-files-found: warn

      # SonarCloud (executa se ORGANIZATION e PROJECT_KEY estiverem definidos)
      - name: SonarCloud Scan
        if: always() && env.SONAR_TOKEN != '' && env.SONAR_ORGANIZATION != '' && env.SONAR_PROJECT_KEY != ''
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORGANIZATION }}
            -Dsonar.python.coverage.reportPaths=coverage.xml

      - name: SonarCloud Quality Gate
        if: always() && env.SONAR_TOKEN != '' && env.SONAR_ORGANIZATION != '' && env.SONAR_PROJECT_KEY != ''
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

  markdownlint:
    name: markdownlint
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Run markdownlint
        run: npx -y markdownlint-cli@0.38.0 "**/*.md" --config .markdownlint.json
